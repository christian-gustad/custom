
#+TITLE: My Emacs Configuration
#+AUTHOR: Christian Gustad
#+EMAIL: cgustad@gmail.com
#+STARTUP: fold
* Start
** Update all packages
 #+begin_src emacs-lisp
   (require 'package)
   ;; Should make MELP more stable
   (setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3")
   ;;(setq package-enable-at-startup nil)
   (setq package-archives '())
   (add-to-list 'package-archives
                '("melpa-stable" . "https://stable-melpa.org/packages/") t)
      (add-to-list 'package-archives
                   '("melpa" . "http://melpa.milkbox.net/packages/") t)
      (add-to-list 'package-archives
                   '("gnu" . "http://elpa.gnu.org/packages/"))  
      (add-to-list 'package-archives
                   '("marmalade" . "https://marmalade-repo.org/packages/"))
      (add-to-list 'package-archives
                   '("org" . "http://orgmode.org/elpa/") t)
      (add-to-list 'package-archives
                   '("tromey" . "http://tromey.com/elpa/") t)

      (package-initialize)
            (ignore-errors
               (auto-package-update-now))
   (package-refresh-contents)
 #+end_src
** Quelpa
#+begin_src emacs-lisp
(use-package quelpa
  :defer 5
  :custom (quelpa-upgrade-p t "Always try to update packages")
  :config
  ;; Get ‘quelpa-use-package’ via ‘quelpa’
  (quelpa
   '(quelpa-use-package
     :fetcher git
     :url "https://github.com/quelpa/quelpa-use-package.git"))
  (require 'quelpa-use-package))
   #+end_src
** Global keybindings

 #+begin_src emacs-lisp
      (global-set-key [f12] 'helm-bookmarks)
      (global-set-key [f11] 'helm-recentf)
      (global-set-key [f9]  'treemacs)
      (global-set-key [f7] '(global-prettify-symbols-mode))
   ;; functions
   ;;    ;; Wind
      ;(global-set-key (kbd "C-c <left>")  'windmove-left)
      ;(global-set-key (kbd "C-c <right>") 'windmove-right)
      ;(global-set-key (kbd "C-c <up>")    'windmove-up)
      ;(global-set-key (kbd "C-c <down>")  'windmove-down)
      ;; Org
      (global-set-key (kbd "C-c n p") 'org-projectile-project-todo-completing-read)
#+end_src

#+RESULTS:
: org-projectile-project-todo-completing-read
** Startup
***** Dashboard
 #+begin_src emacs-lisp
	       (require 'dashboard)
	       (dashboard-setup-startup-hook)
	       ;; Or if you use use-package
	       (use-package dashboard
		 :ensure t
		 :config
		 (dashboard-setup-startup-hook))
	       ;; Content is not centered by default. To center, set
	       (setq dashboard-center-content t)

	       ;; To disable shortcut "jump" indicators for each section, set
	       (setq dashboard-show-shortcuts nil)

	       ;; Set visible items
	       (setq dashboard-items '((recents  . 5)
				       (bookmarks . 5)
				       (projects . 5)
				       (agenda . 5)
				       (registers . 5)))

   (require 'counsel-projectile)

(add-to-list 'dashboard-items '(agenda) t)
      (setq dashboard-projects-switch-function 'counsel-projectile-switch-project-by-name)
	       ;; Custom item
	       ;;(defun dashboard-insert-custom (list-size)
	       ;;(insert "Custom text"))
	       ;;(add-to-list 'dashboard-item-generators  '(custom . dashboard-insert-custom))
	       ;;(add-to-list 'dashboard-items '(custom) t)

	    ;; Format: "(icon title help action face prefix suffix)"
	 ;; Custom setup
	    ;; (setq dashboard-navigator-buttons
		  ;; `(;; line1
		  ;;   ((,(all-the-icons-octicon "mark-github" :height 1.1 :v-adjust 0.0)
		  ;;    "Homepage"
		  ;;    "Browse homepage"
		  ;;    (lambda (&rest _) (browse-url "homepage")))
		  ;;   ("★" "Star" "Show stars" (lambda (&rest _) (show-stars)) warning)
		  ;;   ("?" "" "?/h" #'show-help nil "<" ">"))
		  ;;    ;; line 2
		  ;;   ((,(all-the-icons-faicon "linkedin" :height 1.1 :v-adjust 0.0)
		  ;;     "Linkedin"
		  ;;     ""
		  ;;     (lambda (&rest _) (browse-url "homepage")))
		  ;;    ("⚑" nil "Show flags" (lambda (&rest _) (message "flag")) error))))
	       ;; Add some graphics
	       (setq dashboard-set-heading-icons t)
	       (setq dashboard-set-file-icons t)
	       (setq dashboard-set-navigator t)
	       (dashboard-modify-heading-icons '((recents . "file-text")
						    (bookmarks . "book")))


				 (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
 #+end_src
***** Hide splash screen
 #+begin_src emacs-lisp
 (setq inhibit-startup-message t)
 #+end_src
***** Hide backup files
    #+begin_src emacs-lisp
 (setq backup-directory-alist '(("." . "~C://Users/Christian/backups")))
    #+end_src
****** Highlight indents

#+begin_src emacs-lisp
;(load "c:/Users/Christian/AppData/Roaming/.emacs.d/highlight-indent-guides/highlight-indent-guides")
 #+end_src

****** Line numbering mode
   #+begin_src emacs-lisp

     (require 'display-line-numbers)
     (setq linum-relative-backend 'display-line-numbers-mode)
     (defcustom display-line-numbers-exempt-modes
       '(vterm-mode eshell-mode shell-mode term-mode ansi-term-mode)
       "Major modes on which to disable line numbers."
       :group 'display-line-numbers
       :type 'list
       :version "green")

     (defun display-line-numbers--turn-on ()
       "Turn on line numbers except for certain major modes.
     Exempt major modes are defined in `display-line-numbers-exempt-modes'."
       (unless (or (minibufferp)
		   (member major-mode display-line-numbers-exempt-modes))
	 (display-line-numbers-mode)))

     ; (global-display-line-numbers-mode)
     (load "c:/Users/Christian/AppData/Roaming/.emacs.d/elisp/linum")
     ;(load "c:/Users/Christian/AppData/Roaming/.emacs.d/highlight-indent-guides/highlight-indent-guides")
    #+end_src

** Visual customization
***** Calendar
         #+begin_src emacs-lisp
                                                       ; Load dir
(add-to-list 'load-path "~/.emacs.d/emacs-calfw/")

                                 (require 'calfw)
                                 (require 'calfw-org)
                      (setq cfw:org-overwrite-default-keybinding t)
           ;; Month
           (setq calendar-month-name-array
             ["January" "February" "March"     "April"   "May"      "June"
              "July"    "August"   "September" "October" "November" "December"])

           ;; Week days
           (setq calendar-day-name-array
                 ["Sunday" "Monday" "Tuesday" "Wednesday" "Thursday" "Friday" "Saturday"])

           ;; First day of the week
           (setq calendar-week-start-day 0) ; 0:Sunday, 1:Monday
         #+end_src
***** Fonts and encoding
         #+begin_src emacs-lisp
         (when (member "Symbola" (font-family-list))
             (set-fontset-font "fontset-default" nil
                               (font-spec :size 20 :name "Symbola")))


           (when (member "Symbola" (font-family-list))
             (set-fontset-font t 'unicode "Symbola" nil 'prepend))


           (prefer-coding-system       'utf-8)
           (set-default-coding-systems 'utf-8)
           (set-terminal-coding-system 'utf-8)
           (set-keyboard-coding-system 'utf-8)
           (setq default-buffer-file-coding-system 'utf-8)
#+end_src
***** Fonts
    #+begin_src emacs-lisp
      ;; Set default font
      (set-face-attribute 'default nil
                          :family "Source Code Pro"
                          :height 110
                          :weight 'normal
                          :width 'normal)
                                #+end_src




*****  All the icons
    #+begin_src emacs-lisp
      (require 'all-the-icons)
                      (use-package all-the-icons-ibuffer
            :ensure t
            :hook (ibuffer-mode . all-the-icons-ibuffer-mode))

            ; Predicate whether the icons are able to be displayed."
      (setq all-the-icons-ibuffer-display-predicate #'display-graphic-p)

      ;; Whether display the icons.
      (setq all-the-icons-ibuffer-icon t)

      ;; Whether display the colorful icons.
      ;; It respects `all-the-icons-color-icons'.
      (setq all-the-icons-ibuffer-color-icon t)

      ;; The default icon size in ibuffer.
      (setq all-the-icons-ibuffer-icon-size 1.0)

      ;; The default vertical adjustment of the icon in ibuffer.
      (setq all-the-icons-ibuffer-icon-v-adjust 0.0)

      ;; Use human readable file size in ibuffer.
      (setq  all-the-icons-ibuffer-human-readable-size t)

      ;; A list of ways to display buffer lines with `all-the-icons'.
      ;; See `ibuffer-formats' for details.
      ;all-the-icons-ibuffer-formats

      ;; Slow Rendering
      ;; If you experience a slow down in performance when rendering multiple icons simultaneously,
      ;; you can try setting the following variable
      (setq inhibit-compacting-font-caches t)
    #+end_src
***** Hide all toolbars bars
 #+begin_src emacs-lisp
 (visual-line-mode 1)
 (menu-bar-mode -1)
 (scroll-bar-mode -1)
 (tool-bar-mode -1)
 #+end_src
***** Rand-theme
#+begin_src emacs-lisp
  (require 'rand-theme)
    ;; Themes I *only* want to be selected
    (setq rand-theme-wanted '(soothe zenburn solarized-dark spacemacs-dark monokai gruvbox cyberpunk ample moe alect-dark afternoon flatland gruber-darker clues dracula))

    (rand-theme)
  (global-set-key (kbd "C-x z") 'rand-theme-iterate)
#+end_src
***** Prettify
 #+begin_src emacs-lisp
   (require prettify)
   (global-prettify-symbols-mode 1)
      #+end_src
*****  Indents
#+begin_src emacs-lisp
  (require 'highlight-indent-guides)
    ;(load "c:/Users/Christian/AppData/Roaming/.emacs.d/highlight-indent-guides/highlight-indent-guides")
    (add-hook 'prog-mode-hook 'highlight-indent-guides-mode)
    (setq highlight-indent-guides-method 'character)
    (set-face-background 'highlight-indent-guides-odd-face "darkgray")
  (set-face-background 'highlight-indent-guides-even-face "dimgray")
  (set-face-foreground 'highlight-indent-guides-character-face "dimgray")
#+end_src
***** Modline
    #+begin_src emacs-lisp
 (require 'doom-modeline)
 (doom-modeline-mode 1)
    #+end_src
***** Eldoc
#+begin_src  emacs-lisp
  (require 'eldoc)
  ; ADD ELDOC BOX
#+end_src


* Tools
** Ace-window
   #+begin_src emacs-lisp

   (global-set-key (kbd "M-o") 'ace-window)
	  (setq aw-background nil)
     (defvar aw-dispatch-alist
       '((?x aw-delete-window "Delete Window")
	     (?m aw-swap-window "Swap Windows")
	     (?M aw-move-window "Move Window")
	     (?c aw-copy-window "Copy Window")
	     (?j aw-switch-buffer-in-window "Select Buffer")
	     (?n aw-flip-window)
	     (?u aw-switch-buffer-other-window "Switch Buffer Other Window")
	     (?c aw-split-window-fair "Split Fair Window")
	     (?v aw-split-window-vert "Split Vert Window")
	     (?b aw-split-window-horz "Split Horz Window")
	     (?o delete-other-windows "Delete Other Windows")
	     (?? aw-show-dispatch-help))
       "List of actions for `aw-dispatch-default'.")
   #+end_src


** Undo tree
    #+begin_src emacs-lisp
 (use-package undo-tree
   :diminish undo-tree-mode
   :config
   (progn
     (global-undo-tree-mode)
     (setq undo-tree-visualizer-timestamps t)
     (setq undo-tree-visualizer-diff t)))
    #+end_src

** Treemacs
   #+begin_src emacs-lisp

     (use-package treemacs
       :ensure t
       :defer t
       :init
       (with-eval-after-load 'winum
         (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
       :config
       (progn
         (setq treemacs-collapse-dirs                 (if treemacs-python-executable 3 0)
               treemacs-deferred-git-apply-delay      0.5
               treemacs-directory-name-transformer    #'identity
               treemacs-display-in-side-window        t
               treemacs-eldoc-display                 t
               treemacs-file-event-delay              5000
               treemacs-file-extension-regex          treemacs-last-period-regex-value
               treemacs-file-follow-delay             0.2
               treemacs-file-name-transformer         #'identity
               treemacs-follow-after-init             t
               treemacs-git-command-pipe              ""
               treemacs-goto-tag-strategy             'refetch-index
               treemacs-indentation                   2
               treemacs-indentation-string            " "
               treemacs-is-never-other-window         nil
               treemacs-max-git-entries               5000
               treemacs-missing-project-action        'ask
               treemacs-move-forward-on-expand        nil
               treemacs-no-png-images                 nil
               treemacs-no-delete-other-windows       t
               treemacs-project-follow-cleanup        nil
               treemacs-persist-file                  (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
               treemacs-position                      'left
               treemacs-read-string-input             'from-child-frame
               treemacs-recenter-distance             0.1
               treemacs-recenter-after-file-follow    nil
               treemacs-recenter-after-tag-follow     nil
               treemacs-recenter-after-project-jump   'always
               treemacs-recenter-after-project-expand 'on-distance
               treemacs-show-cursor                   nil
               treemacs-show-hidden-files             t
               treemacs-silent-filewatch              nil
               treemacs-silent-refresh                nil
               treemacs-sorting                       'alphabetic-asc
               treemacs-space-between-root-nodes      t
               treemacs-tag-follow-cleanup            t
               treemacs-tag-follow-delay              1.5
               treemacs-user-mode-line-format         nil
               treemacs-user-header-line-format       nil
               treemacs-width                         35
               treemacs-workspace-switch-cleanup      nil)

         ;; The default width and height of the icons is 22 pixels. If you are
         ;; using a Hi-DPI display, uncomment this to double the icon size.
         ;;(treemacs-resize-icons 44)

         (treemacs-follow-mode t)
         (treemacs-filewatch-mode t)
         (treemacs-fringe-indicator-mode 'always)
         (pcase (cons (not (null (executable-find "git")))
                      (not (null treemacs-python-executable)))
           (`(t . t)
            (treemacs-git-mode 'deferred))
           (`(t . _)
            (treemacs-git-mode 'simple))))
       :bind
       (:map global-map
             ("M-0"       . treemacs-select-window)
             ("C-x t 1"   . treemacs-delete-other-windows)
             ("C-x t t"   . treemacs)
             ("C-x t B"   . treemacs-bookmark)
             ("C-x t C-t" . treemacs-find-file)
             ("C-x t M-t" . treemacs-find-tag)))

     (add-hook 'emacs-startup-hook 'treemacs)

     (use-package treemacs-projectile
       :after (treemacs projectile)
       :ensure t)

     (use-package treemacs-icons-dired
       :after (treemacs dired)
       :ensure t
       :config (treemacs-icons-dired-mode))

     (use-package treemacs-magit
       :after (treemacs magit)
       :ensure t)

     (use-package treemacs-persp ;;treemacs-perspective if you use perspective.el vs. persp-mode
       :after (treemacs persp-mode) ;;or perspective vs. persp-mode
       :ensure t
       :config (treemacs-set-scope-type 'Perspectives))
   #+end_src
** Skewer
  #+begin_src emacs-lisp
  (add-hook 'js2-mode-hook 'skewer-mode)
  (add-hook 'css-mode-hook 'skewer-css-mode)
  (add-hook 'html-mode-hook 'skewer-html-mode)
  #+end_src
** Validate
#+begin_src emacs-lisp
(require 'validate)
#+end_src
** Ob-html-chrome
#+begin_src emacs-lisp
(require 'ob-html-chrome)
#+end_src
** Projectile
   #+begin_src emacs-lisp
     (require 'projectile)
     (projectile-global-mode)
     (setq projectile-completion-system 'helm)
     (helm-projectile-on)
     (global-set-key (kbd "C-x p") 'projectile-command-map)
     (setq projectile-switch-project-action 'helm-projectile-find-file)
     (setq projectile-switch-project-action 'helm-projectile)
     ;; Enable caching
     (setq projectile-enable-caching t)
     ;; Sort files by recent
     (setq projectile-sort-order 'recentf)
     ;; Require each project to have a root
     (setq projectile-require-project-root t)
     (setq projectile-project-search-path '("C://Users/Christian//Projects/"))
     (require 'org-projectile)
     ;;(setq org-projectile-projects-file
     ;;"/your/path/to/an/org/file/for/storing/project/todos.org")
     (push (org-projectile-project-todo-entry) org-capture-templates)
     (setq org-agenda-files (append org-agenda-files (org-projectile-todo-files)))

     (add-hook 'projectile-after-switch-project-hook (lambda ()
	   (projectile-invalidate-cache nil)))

   #+end_src

** Helm
 #+begin_src emacs-lisp
 (require 'helm)
 (use-package helm
   ;; The default "C-x c" is quite close to "C-x C-c", which quits Emacs.
   ;; Changed to "C-c h". Note: We must set "C-c h" globally, because we
   ;; cannot change `helm-command-prefix-key' once `helm-config' is loaded.
   :demand t
   :bind (("M-x" . helm-M-x)
      ("C-c h o" . helm-occur)
      ("<f1> SPC" . helm-all-mark-rings) ; I modified the keybinding
      ("M-y" . helm-show-kill-ring)
      ("C-c h x" . helm-register)    ; C-x r SPC and C-x r j
      ("C-c h g" . helm-google-suggest)
      ("C-c h M-:" . helm-eval-expression-with-eldoc)
      ("C-x C-f" . helm-find-files)
      ("C-x b" . helm-mini)      ; *<major-mode> or /<dir> or !/<dir-not-desired> or @<regexp>
      :map helm-map
      ("<tab>" . helm-execute-persistent-action) ; rebind tab to run persistent action
      ("C-i" . helm-execute-persistent-action) ; make TAB works in terminal
      ("C-z" . helm-select-action) ; list actions using C-z
      :map shell-mode-map
      ("C-c C-l" . helm-comint-input-ring) ; in shell mode
      :map minibuffer-local-map
      ("C-c C-l" . helm-minibuffer-history))
   :init
   (setq helm-command-prefix-key "C-c h")
   (setq recentf-save-file "~/.emacs.d/misc/recentf" ; customize yours
     recentf-max-saved-items 50)
   :config

   (helm-descbinds-mode)
   (setq helm-split-window-in-side-p         t ; open helm buffer inside current window, not occupy whole other window
       helm-move-to-line-cycle-in-source     t ; move to end or beginning of source when reaching top or bottom of source.
       helm-ff-search-library-in-sexp        t ; search for library in `require' and `declare-function' sexp.
       helm-scroll-amount                    8 ; scroll 8 lines other window using M-<next>/M-<prior>
       helm-ff-file-name-history-use-recentf t
       helm-echo-input-in-header-line t)
   (setq helm-autoresize-max-height 0)
   (setq helm-autoresize-min-height 20)
   (helm-mode 1)
   (helm-autoresize-mode 0))
 (require 'helm-descbinds)
 (when (executable-find "ack-grep")
   (setq helm-grep-default-command "ack-grep -Hn --no-group --no-color %e %p %f"
         helm-grep-default-recurse-command "ack-grep -H --no-group --no-color %e %p %f"))
 (setq helm-semantic-fuzzy-match t
       helm-imenu-fuzzy-match    t)
 (add-to-list 'helm-sources-using-default-as-input 'helm-source-man-pages)
 (setq helm-locate-fuzzy-match t)
 (global-set-key (kbd "C-c h o") 'helm-occur)
 (setq helm-aprpoos-fuzzy-match t)
 (setq helm-lisp-fuzzy-completion t)
 (global-set-key (kbd "C-h SPC") 'helm-all-mark-rings)
 (global-set-key (kbd "C-c h x") 'helm-register)
 (global-set-key (kbd "C-c h g") 'helm-google-suggest)
 (add-hook 'eshell-mode-hook
           #'(lambda ()
               (define-key eshell-mode-map (kbd "C-c C-l")  'helm-eshell-history)))
; (require 'helm-eshell)
 #+end_src
** Recentf
 #+begin_src emacs-lisp
 (use-package recentf                    ; Save recently visited files
   :init (recentf-mode)
   :config
   (validate-setq
    recentf-max-saved-items 500
    recentf-max-menu-items 15
    recentf-auto-cleanup 300))
 #+end_src
** Company
 #+begin_src emacs-lisp
   (require 'company)
   (global-company-mode)
#+end_src
** Backends
 #+begin_src emacs-lisp
   (setq company-backends
	 '((company-files          ; files & directory
	    company-keywords       ; keywords
	    company-capf
	    company-yasnippet
	    company-jedi)
	   (company-abbrev company-dabbrev)
	   ))
 #+end_src
** YAsnippet
   #+begin_src emacs-lisp
   (require 'yasnippet)
   (yas-global-mode 1)
   (setq helm-yas-space-match-any-greedy t)
   (global-set-key (kbd "C-x y") 'helm-yas-complete)
   #+end_src
   
* Development
** Programming hooks
#+begin_src emacs-lisp
    (add-hook 'prog-mode-hook
            (lambda ()
              (highlight-indent-guides-mode)
            (setq highlight-indent-guides-method 'character)
            (linum-mode)))
    (setq-default show-trailing-whitespace t)
** Flymake


#+begin_src emacs-lisp
  (use-package flymake
  :preface
  (defun flymake-setup-next-error-function ()
    (setq next-error-function 'flymake-next-error-compat))

  (defun flymake-next-error-compat (&optional n _)
    (flymake-goto-next-error n))

  (defun flymake-diagnostics-next-error ()
    (interactive)
    (forward-line)
    (when (eobp) (forward-line -1))
    (flymake-show-diagnostic (point)))

  (defun flymake-diagnostics-prev-error ()
    (interactive)
    (forward-line -1)
    (flymake-show-diagnostic (point)))
  :hook
  (flymake-mode-hook . flymake-setup-next-error-function)
  :general
  (:keymaps
   'flymake-mode-map
   :prefix
   local-leader-key
   "!" 'flymake-show-buffer-diagnostics)
  (:keymaps
   'flymake-mode-map
   :prefix next-prefix
   "E" 'flymake-goto-next-error)
  (:keymaps
   'flymake-mode-map
   :prefix prev-prefix
   "E" 'flymake-goto-prev-error)
  (:keymaps
   'flymake-diagnostics-buffer-mode-map
   "n" 'flymake-diagnostics-next-error
   "p" 'flymake-diagnostics-prev-error
   "j" 'flymake-diagnostics-next-error
   "k" 'flymake-diagnostics-prev-error
   "RET" 'flymake-goto-diagnostic
   "TAB" 'flymake-show-diagnostic)
  :init
  (setq flymake-proc-ignored-file-name-regexps '("\\.l?hs\\'"))

  (remove-hook 'flymake-diagnostic-functions 'flymake-proc-legacy-flymake))
#+end_src


** Magit
 #+begin_src emacs-lisp
   (require 'magit)
    (require 'magithub)
   (global-set-key (kbd "C-x g") 'magit-status)
 #+end_src
** Markdown
#+begin_src emacs-lisp
   (use-package markdown-mode
  :ensure t
  :commands (markdown-mode gfm-mode)
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init (setq markdown-command "multimarkdown"))
  #+end_src
** Data science stack
*** Jupyter
     #+begin_src emacs-lisp
     (require 'jupyter)
     #+end_src

*** Python
**** Hooks

    #+begin_src emacs-lisp
      (add-hook 'python-mode-hook
                (lambda ()
                  (lsp-mode)
                  ;(pyenv-mode)
                  (flycheck-mode)
                  (setq poetry-tracking-mode t)
	    (setq prettify-symbols-mode t)
                  )
                )
	       #+end_src
**** Ligatures
#+begin_src  emacs-lisp
                 (mapc (lambda (pair) (push pair prettify-symbols-alist))
                        '(;; Syntax
                          ("def" .      #x2131)
                          ("not" .      #x2757)
                          ("in" .       #x2208)
                          ("not in" .   #x2209)
                          ("return" .   #x27fc)
                          ("yield" .    #x27fb)
                          ("for" .      #x2200)
                          ;; Base Types
                          ("int" .      #x2124)
                          ("float" .    #x211d)
                          ("str" .      #x1d54a)
                          ("True" .     #x1d54b)
                          ("False" .    #x1d53d)
                          ;; Mypy
                          ("Dict" .     #x1d507)
                          ("List" .     #x2112)
                          ("Tuple" .    #x2a02)
                          ("Set" .      #x2126)
                          ("Iterable" . #x1d50a)
                          ("Any" .      #x2754)
                          ("Union" .    #x22c3)))
#+end_src
**** lsp mode
#+begin_src emacs-lisp

  (use-package flycheck
     :ensure t
     :config
     (setq flycheck-python-flake8-executable "flake8")
     (setq-default flycheck-disabled-checkers '(c/c++-clang c/c++-cppcheck c/c++-gcc)) 
     (add-to-list 'flycheck-checkers 'python-flake8)
     )
   (use-package lsp-mode
     :ensure t
     :hook
   (
	(c-mode . lsp-deferred)
	(c++-mode . lsp-deferred)
	(python-mode . lsp-deferred)
	)
     :config
     (setq lsp-idle-delay 0.5
	   lsp-enable-symbol-highlighting t
	   lsp-enable-snippet nil  ;; Not supported by company capf, which is the recommended company backend
	   lsp-pyls-plugins-flake8-enabled t)
     (lsp-register-custom-settings
      '(("pyls.plugins.pyls_mypy.enabled" t t)
	("pyls.plugins.pyls_mypy.live_mode" nil t)
	("pyls.plugins.pyls_black.enabled" t t)
	("pyls.plugins.pyls_isort.enabled" t t)

	;; Disable these as they're duplicated by flake8
	("pyls.plugins.pycodestyle.enabled" nil t)
	("pyls.plugins.mccabe.enabled" nil t)
	("pyls.plugins.pyflakes.enabled" nil t)))
   (use-package lsp-ui
       :ensure t
       :hook (
	      (lsp-mode . lsp-ui-mode)
	      (c-mode . flycheck-mode)
	      (c++mode . flycheck-mode)
	      (python-mode . flycheck-mode)
	      )
       :commands lsp-ui-mode)
     ;; get lsp-python-enable defined
     ;; NB: use either projectile-project-root or ffip-get-project-root-directory
     ;;     or any other function that can be used to find the root directory of a project
   ;; (lsp-define-stdio-client lsp-python "python"
   ;; 			 #'projectile-project-root
   ;; 			 '("pyls"))

   ;; ;; ma ke sure this is activated when python-mode is activated
   ;; lsp-python-enable is created by macro above
   (use-package lsp-ui
     :config (setq lsp-ui-sideline-show-hover t
		   lsp-ui-sideline-delay 0.5
		   lsp-ui-doc-delay 5
		   lsp-ui-sideline-ignore-duplicates t
		   lsp-ui-doc-position 'bottom
		   lsp-ui-doc-alignment 'frame
		   lsp-ui-doc-header nil
		   lsp-ui-doc-include-signature t
		   lsp-ui-doc-use-childframe t)
    (add-hook 'lsp-mode-hook 'lsp-ui-mode)

   ;(use-package company-lsp
     ;:config
     ;(push 'company-lsp company-backends))

   (defun lsp-set-cfg ()
     (let ((lsp-cfg `(:pyls (:configurationSources ("flake8")))))
       ;; TODO: check lsp--cur-workspace here to decide per server / project
       (lsp--set-configuration lsp-cfg)))

   (add-hook 'lsp-after-initialize-hook 'lsp-set-cfg))

     )
         #+end_src
**** Virtaul enviorment
***** Poetry
      #+begin_src emacs-lisp
      (require 'poetry)
      #+end_src
***** Pyvenv
      #+begin_src emacs-lisp
	       (use-package pyenv-mode
		 :init
		 :config
	       (pyenv-mode)
	       :bind
	       ("C-x v e" . pyenv-activate-current-project)
	       ("C-x v s" . pyenv-mode-set)
	       ("C-x v u" . pyenv-mode-unset)
	       )
      #+end_src
*** Julia
    #+begin_src emacs-lisp
(use-package julia-mode
  :ensure t)

(use-package julia-repl
  :ensure t
  :hook (julia-mode . julia-repl-mode)

  :init
  (setenv "JULIA_NUM_THREADS" "8")

  :config
  ;; Set the terminal backend
  (julia-repl-set-terminal-backend 'vterm)
  
  ;; Keybindings for quickly sending code to the REPL
  (define-key julia-repl-mode-map (kbd "<M-RET>") 'my/julia-repl-send-cell)
  (define-key julia-repl-mode-map (kbd "<C-RET>") 'julia-repl-region-or-send-line)
  (define-key julia-repl-mode-map (kbd "C-c C-c") 'julia-repl-send-buffer))
	   #+end_src
*
*** Emacs speaks statistics
**** Keybidings
#+begin_src emacs-lisp
;(define-key ess-mode-map kbd-eval-at-point 'r-eval-line-or-selected)
#+end_src
     #+begin_src emacs-lisp
  (use-package ess
    :ensure t
    :init
    (require 'ess-site)
    ;; key binding for insert-assign that doesn't add extra spaces:
    (defun r-insert-assign-space-aware ()
      (interactive)
      (just-one-space 1)
      (insert "<-")
      (just-one-space 1))
    ;; key binding for pipe:
    (defun r-pipe-operator ()
      (interactive)
      (just-one-space 1)
      (insert "%>%")
      (just-one-space 1))
    ;; key binding for evaluating line or selected text:
    (defun r-eval-line-or-selected ()
      (interactive)
      (if (and transient-mark-mode mark-active)
          (call-interactively 'ess-eval-region)
	(call-interactively 'ess-eval-line)))
    :mode ("\\.R\\'" . R-mode)
    :bind (:map ess-r-mode-map
           ("s-n" . r-insert-assign-space-aware)
           ("s-N" . r-pipe-operator)
           ("s-m" . r-eval-line-or-selected)
           ("s-M" . ess-eval-region-or-function-or-paragraph-and-step)
           :map inferior-ess-r-mode-map
           ("s-n" . r-insert-assign-space-aware)
           ("s-N" . r-pipe-operator)
           ("s-m" . r-eval-line-or-selected)
           ("s-M" . ess-eval-region-or-function-or-paragraph-and-step))
    :config
    (validate-setq
     ring-bell-function #'ignore
     ess-ask-for-ess-directory nil
     inferior-R-program-name "/usr/bin/R"
     ;;inferior-R-program-name "/Users/sejdemyr/xp-env/bin/xp-R"
     ess-local-process-name "R"
     ansi-color-for-comint-mode 'filter
     comint-scroll-to-bottom-on-input t
     comint-scroll-to-bottom-on-output t
     comint-move-point-for-output t
     ess-default-style 'RStudio)         ; rstudio indentation style
    )

     #+end_src
** Lisp
*** Hooks
#+begin_src emacs-lisp
(add-hook 'lisp-mode-hook
(lambda ()
(slime-mode t)
#+end_src
*** Slime
    #+begin_src emacs-lisp
    ;;; Lisp
    (require 'slime)
    (slime-setup '(slime-fancy slime-quicklisp slime-asdf))
    (setq show-paren-style 'expression)(linum-mode 1)))
    (add-hook 'inferior-lisp-mode-hook (lambda () (inferior-slime-mode t)()))
    (setq inferior-lisp-program "sbcl")
    #+end_src


* Org
#+begin_src emacs-lisp
   (require 'org)
  (require 'ox-rst)

#+end_src
*** Hooks
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook
           (lambda ()
           (variable-pitch-mode 1)
           (flyspell-mode 1)
           (visual-line-mode 1)
            ))
#+end_src
*** Make scratch buffer into org mode
 #+begin_src emacs-lisp
 (setq initial-major-mode 'org-mode)
 #+end_src
*** Keybindings
#+begin_src emacs-lisp
    (global-set-key (kbd "C-c l") 'org-store-link)
    (global-set-key (kbd "C-c a") 'org-agenda)
    (global-set-key (kbd "C-c c") 'org-capture)
    (global-set-key (kbd "<f6>") 'org-capture)
    (global-set-key (kbd "C-c C-d") 'org-deadline)
  (global-set-key (kbd "C-c C-s") 'org-schedule)

#+end_src
*** Visual customization

#+begin_src emacs-lisp

    (setq org-startup-indented t
          org-src-tab-acts-natively t)



    (setq org-hide-emphasis-markers t
          org-fontify-done-headline t
          org-hide-leading-stars t
          org-pretty-entities t
          org-odd-levels-only nil)



    (use-package org-bullets
      :custom
      (org-bullets-bullet-list '("*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*"))
      (org-ellipsis "⤵")
      :hook (org-mode . org-bullets-mode))



    (font-lock-add-keywords 'org-mode
                            '(("^ *\\([-]\\) "
                               (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))
    (font-lock-add-keywords 'org-mode
                            '(("^ *\\([+]\\) "
                               (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "◦"))))))


    (setq-default prettify-symbols-alist '(("#+BEGIN_SRC" . "†")
                                           ("#+END_SRC" . "†")
                                           ("#+begin_src" . "†")
                                           ("#+end_src" . "†")
                                           (">=" . "≥")
                                           ("=>" . "⇨")))
  (add-hook 'org-mode-hook 'prettify-symbols-mode)
             (custom-theme-set-faces
              'user
              '(org-block                 ((t (:inherit fixed-pitch))))
              '(org-document-info-keyword ((t (:inherit (shadow fixed-pitch)))))
              '(org-property-value        ((t (:inherit fixed-pitch))) t)
              '(org-special-keyword       ((t (:inherit (font-lock-comment-face fixed-pitch)))))
              '(org-tag                   ((t (:inherit (shadow fixed-pitch) :weight bold))))
              '(org-verbatim              ((t (:inherit (shadow fixed-pitch))))))

             (use-package org-fancy-priorities
               :ensure t
               :hook (org-mode . org-fancy-priorities-mode)
               :config
               (setq org-fancy-priorities-list '("" "" "" "" "" )))

#+end_src
*** Agenda
*** Folder location
 #+begin_src emacs-lisp
 (setq org-agenda-files (list "C://Users/Christian/Org"))
 #+end_src
*** TODO-Keywords
#+begin_src emacs-lisp
(setq org-todo-keywords
      '((sequence "TODO(t)" "INPROGRESS(i)" "|" "DONE(d)")
        (sequence " WAITING(w)" "BUG(b)" "KOWNCAUSE(k)" "|" "FIXED(f)")
        (sequence "|" "CANCELLED(c)")))
#+end_src
*** Tag list
#+begin_src emacs-lisp
    ;; Org Tags


    (setq org-tag-alist `(
			(:startgrouptag . nil)
			("CS-tools" . ?C)
			(:grouptags)
			("Python" . ?p)
			("Git" . ?g)
			("Jupyter" . ?J)
			("Dash" . ?d)
  ))
  
#+end_src
*** Journals
**** Reversetree for dates
#+begin_src emacs-lisp
(setq-default org-reverse-datetree-level-formats
              '("%Y"                    ; year
                (lambda (time) (format-time-string "%Y-%m %B" (org-reverse-datetree-monday time))) ; month
                "%Y W%W"                ; week
                "%Y-%m-%d %A"           ; date
                ))
#+end_src
**** Capture templates
#+begin_src emacs-lisp
(setq org-capture-templates
  '(
    ("n" "Note" entry (file+function "~/Org/Archive.org" org-reverse-datetree-goto-date-in-file)
     "* %? "
    :empty-lines 1)
    ("s" "Snippet" entry (file+function "~/Org/Archive.org" org-reverse-datetree-goto-date-in-file)
     "* %? :SNIPPET:"
    :empty-lines 1)
    ("t" "TODO" entry (file+function "~/Org/Archive.org" org-reverse-datetree-goto-date-in-file)
     "* %? TODO [#B]
     SCHEDULED: %(org-insert-time-stamp (org-read-date nil t \"+1d\"))" 
     :empty-lines 1)
    ))
#+end_src
**** Custom agendaviews
#+begin_src emacs-lisp
(defun air-org-skip-subtree-if-priority (priority)
  "Skip an agenda subtree if it has a priority of PRIORITY.
PRIORITY may be one of the characters ?A, ?B, or ?C."
  (let ((subtree-end (save-excursion (org-end-of-subtree t)))
        (pri-value (* 1000 (- org-lowest-priority priority)))
        (pri-current (org-get-priority (thing-at-point 'line t))))
    (if (= pri-value pri-current)
        subtree-end
      nil)))

(setq org-agenda-custom-commands
      '(("d" "Daily agenda"
         ((tags "PRIORITY=\"A\""
                ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                 (org-agenda-overriding-header "High-priority unfinished tasks:")))
          (agenda "" ((org-agenda-ndays 1)))
          (alltodo ""
                   ((org-agenda-skip-function '(or (air-org-skip-subtree-if-priority ?A)
                                                   (org-agenda-skip-if nil '(scheduled deadline))))
                    (org-agenda-overriding-header "ALL normal priority tasks:"))))
         ((org-agenda-compact-blocks t)))
	("w" tags-todo "WORK")
	("h" tags-todo "HOME")))
#+end_src
*** Babel
*** Load languages
 #+begin_src emacs-lisp
   (org-babel-do-load-languages
    'org-babel-load-languages
    '((python . t)
      (emacs-lisp . t)
      (lisp . t)
      (R . t)
      (html-chrome . t)
      (jupyter . t)))
 #+end_src
*** Remove confermation message
 #+begin_src emacs-lisp
(setq org-confirm-babel-evaluate nil)
 #+end_src

*** Special blocks
 #+begin_src emacs-lisp
(use-package org-special-block-extras
  :ensure t
  :hook (org-mode . org-special-block-extras-mode))
#+end_src
